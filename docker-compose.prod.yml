# 企业级知识库管理系统 - 生产环境Docker Compose配置
# @author 伍志勇
# 生产环境部署配置，包含负载均衡、监控、日志等

version: '3.8'

services:
  # 前端应用服务 - 多实例负载均衡
  frontend-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: knowledge-frontend-1
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=https://api.yourdomain.com
      - VITE_APP_TITLE=企业级知识库管理系统
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs_1:/var/log/nginx
    depends_on:
      - backend
    networks:
      - knowledge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: knowledge-frontend-2
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=https://api.yourdomain.com
      - VITE_APP_TITLE=企业级知识库管理系统
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs_2:/var/log/nginx
    depends_on:
      - backend
    networks:
      - knowledge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx负载均衡器
  nginx-lb:
    image: nginx:alpine
    container_name: knowledge-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_lb_logs:/var/log/nginx
    depends_on:
      - frontend-1
      - frontend-2
    networks:
      - knowledge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI服务 - 多实例
  ai-service-1:
    build:
      context: .
      dockerfile: Dockerfile.ai
    container_name: knowledge-ai-service-1
    environment:
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=knowledge_db
      - POSTGRES_USER=knowledge_user
      - POSTGRES_PASSWORD=knowledge_pass
    volumes:
      - ./app:/app:ro
      - ai_vector_store:/app/vector_store
      - ai_lora_adapters:/app/lora_adapters
      - ai_logs_1:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - knowledge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ai-service-2:
    build:
      context: .
      dockerfile: Dockerfile.ai
    container_name: knowledge-ai-service-2
    environment:
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=knowledge_db
      - POSTGRES_USER=knowledge_user
      - POSTGRES_PASSWORD=knowledge_pass
    volumes:
      - ./app:/app:ro
      - ai_vector_store:/app/vector_store
      - ai_lora_adapters:/app/lora_adapters
      - ai_logs_2:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - knowledge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 后端API服务 (占位符)
  backend:
    image: openjdk:17-jdk-alpine
    container_name: knowledge-backend
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/knowledge_db
      - SPRING_DATASOURCE_USERNAME=knowledge_user
      - SPRING_DATASOURCE_PASSWORD=knowledge_pass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - AI_SERVICE_URLS=http://ai-service-1:8000,http://ai-service-2:8000
    depends_on:
      - postgres
      - redis
      - ai-service-1
      - ai-service-2
    networks:
      - knowledge-network
    restart: unless-stopped
    command: |
      sh -c '
        echo "Backend service placeholder - 需要实际的Spring Boot应用"
        echo "AI服务地址: http://ai-service-1:8000,http://ai-service-2:8000"
        sleep infinity
      '

  # PostgreSQL数据库 - 生产配置
  postgres:
    image: postgres:15-alpine
    container_name: knowledge-postgres
    environment:
      - POSTGRES_DB=knowledge_db
      - POSTGRES_USER=knowledge_user
      - POSTGRES_PASSWORD=knowledge_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - knowledge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U knowledge_user -d knowledge_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Redis缓存 - 生产配置
  redis:
    image: redis:7-alpine
    container_name: knowledge-redis
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - knowledge-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: knowledge-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - knowledge-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: knowledge-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - knowledge-network
    restart: unless-stopped
    depends_on:
      - prometheus

# 网络配置
networks:
  knowledge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs_1:
    driver: local
  nginx_logs_2:
    driver: local
  nginx_lb_logs:
    driver: local
  ai_vector_store:
    driver: local
  ai_lora_adapters:
    driver: local
  ai_logs_1:
    driver: local
  ai_logs_2:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local